// Code generated by mockery v2.20.2. DO NOT EDIT.

package app

import (
	ads "homework10/internal/ads"

	mock "github.com/stretchr/testify/mock"

	users "homework10/internal/users"
)

// App is an autogenerated mock type for the App type
type App struct {
	mock.Mock
}

// ChangeAdStatus provides a mock function with given fields: adID, userID, published
func (_m *App) ChangeAdStatus(adID int64, userID int64, published bool) (ads.Ad, error) {
	ret := _m.Called(adID, userID, published)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64, bool) (ads.Ad, error)); ok {
		return rf(adID, userID, published)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, bool) ads.Ad); ok {
		r0 = rf(adID, userID, published)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(int64, int64, bool) error); ok {
		r1 = rf(adID, userID, published)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAd provides a mock function with given fields: title, text, authorID
func (_m *App) CreateAd(title string, text string, authorID int64) (ads.Ad, error) {
	ret := _m.Called(title, text, authorID)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int64) (ads.Ad, error)); ok {
		return rf(title, text, authorID)
	}
	if rf, ok := ret.Get(0).(func(string, string, int64) ads.Ad); ok {
		r0 = rf(title, text, authorID)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(string, string, int64) error); ok {
		r1 = rf(title, text, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: id, nickname, email
func (_m *App) CreateUser(id int64, nickname string, email string) (users.User, error) {
	ret := _m.Called(id, nickname, email)

	var r0 users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string, string) (users.User, error)); ok {
		return rf(id, nickname, email)
	}
	if rf, ok := ret.Get(0).(func(int64, string, string) users.User); ok {
		r0 = rf(id, nickname, email)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	if rf, ok := ret.Get(1).(func(int64, string, string) error); ok {
		r1 = rf(id, nickname, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAd provides a mock function with given fields: adID, authorID
func (_m *App) DeleteAd(adID int64, authorID int64) (ads.Ad, error) {
	ret := _m.Called(adID, authorID)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (ads.Ad, error)); ok {
		return rf(adID, authorID)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) ads.Ad); ok {
		r0 = rf(adID, authorID)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(adID, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: id
func (_m *App) DeleteUser(id int64) (users.User, error) {
	ret := _m.Called(id)

	var r0 users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (users.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) users.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAd provides a mock function with given fields: adID
func (_m *App) GetAd(adID int64) (ads.Ad, error) {
	ret := _m.Called(adID)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (ads.Ad, error)); ok {
		return rf(adID)
	}
	if rf, ok := ret.Get(0).(func(int64) ads.Ad); ok {
		r0 = rf(adID)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(adID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAds provides a mock function with given fields:
func (_m *App) GetAds() ([]ads.Ad, error) {
	ret := _m.Called()

	var r0 []ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]ads.Ad, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []ads.Ad); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdsByTitle provides a mock function with given fields: title
func (_m *App) GetAdsByTitle(title string) ([]ads.Ad, error) {
	ret := _m.Called(title)

	var r0 []ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]ads.Ad, error)); ok {
		return rf(title)
	}
	if rf, ok := ret.Get(0).(func(string) []ads.Ad); ok {
		r0 = rf(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilteredAds provides a mock function with given fields: published, authorID, date
func (_m *App) GetFilteredAds(published int, authorID int64, date string) ([]ads.Ad, error) {
	ret := _m.Called(published, authorID, date)

	var r0 []ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int64, string) ([]ads.Ad, error)); ok {
		return rf(published, authorID, date)
	}
	if rf, ok := ret.Get(0).(func(int, int64, string) []ads.Ad); ok {
		r0 = rf(published, authorID, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int64, string) error); ok {
		r1 = rf(published, authorID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: id
func (_m *App) GetUser(id int64) (users.User, error) {
	ret := _m.Called(id)

	var r0 users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (users.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) users.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAd provides a mock function with given fields: adID, userID, title, text
func (_m *App) UpdateAd(adID int64, userID int64, title string, text string) (ads.Ad, error) {
	ret := _m.Called(adID, userID, title, text)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64, string, string) (ads.Ad, error)); ok {
		return rf(adID, userID, title, text)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, string, string) ads.Ad); ok {
		r0 = rf(adID, userID, title, text)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(int64, int64, string, string) error); ok {
		r1 = rf(adID, userID, title, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: id, nickname, email
func (_m *App) UpdateUser(id int64, nickname string, email string) (users.User, error) {
	ret := _m.Called(id, nickname, email)

	var r0 users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string, string) (users.User, error)); ok {
		return rf(id, nickname, email)
	}
	if rf, ok := ret.Get(0).(func(int64, string, string) users.User); ok {
		r0 = rf(id, nickname, email)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	if rf, ok := ret.Get(1).(func(int64, string, string) error); ok {
		r1 = rf(id, nickname, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewApp interface {
	mock.TestingT
	Cleanup(func())
}

// NewApp creates a new instance of App. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApp(t mockConstructorTestingTNewApp) *App {
	mock := &App{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
